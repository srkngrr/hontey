{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist'; // using local and session storage so when you refresh the page , you will not use your states\n\nimport logger from 'redux-logger'; // is a middleware for logging actions\n// import thunk from 'redux-thunk'; // is a middleware for async event handler\n\nimport createSagaMiddleware from 'redux-saga'; // is a middleware for async event handler\n\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nsagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store);\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/Users/Gurer/Desktop/Git-Hub/hontey/client/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","createSagaMiddleware","rootReducer","rootSaga","sagaMiddleware","middlewares","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,YAAT,QAA6B,eAA7B,C,CAA8C;;AAC9C,OAAOC,MAAP,MAAmB,cAAnB,C,CAAmC;AACnC;;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CAA+C;;AAE/C,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,MAAMC,cAAc,GAAGH,oBAAoB,EAA3C;AAEA,MAAMI,WAAW,GAAG,CAACD,cAAD,CAApB;;AAEA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AAC3CH,EAAAA,WAAW,CAACI,IAAZ,CAAiBT,MAAjB;AACA;;AAED,OAAO,MAAMU,KAAK,GAAGb,WAAW,CAACK,WAAD,EAAcJ,eAAe,CAAC,GAAGO,WAAJ,CAA7B,CAAzB;AAEPD,cAAc,CAACO,GAAf,CAAmBR,QAAnB;AAEA,OAAO,MAAMS,SAAS,GAAGb,YAAY,CAACW,KAAD,CAA9B;AAEP,eAAe;AAAEA,EAAAA,KAAF;AAASE,EAAAA;AAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist'; // using local and session storage so when you refresh the page , you will not use your states\nimport logger from 'redux-logger'; // is a middleware for logging actions\n// import thunk from 'redux-thunk'; // is a middleware for async event handler\nimport createSagaMiddleware from 'redux-saga'; // is a middleware for async event handler\n\nimport rootReducer from './root-reducer'\nimport rootSaga from './root-saga';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst middlewares = [sagaMiddleware]\n\nif (process.env.NODE_ENV === 'development') {\n\tmiddlewares.push(logger)\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares))\n\nsagaMiddleware.run(rootSaga)\n\nexport const persistor = persistStore(store)\n\nexport default { store, persistor };"]},"metadata":{},"sourceType":"module"}